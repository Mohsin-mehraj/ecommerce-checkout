{
    "sourceFile": "backend/services/fileService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1748694118604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1748694118604,
            "name": "Commit-0",
            "content": "\r\n\r\nconst fs = require(\"fs\").promises;\r\nconst path = require(\"path\");\r\n\r\nclass FileService {\r\n  constructor() {\r\n    this.productsPath = path.join(__dirname, \"../data/products.json\");\r\n    this.ordersPath = path.join(__dirname, \"../data/orders.json\");\r\n\r\n    // In-memory storage for Vercel (since file system is not persistent)\r\n    this.memoryOrders = [];\r\n\r\n    // Add some demo orders for recruiters to see\r\n    this.initializeDemoOrders();\r\n\r\n    this.initializeFiles();\r\n  }\r\n\r\n  initializeDemoOrders() {\r\n    // Add some sample orders so recruiters can see the system working\r\n    this.memoryOrders = [\r\n      {\r\n        orderNumber: \"ORD-20250530-DEMO1\",\r\n        customerInfo: {\r\n          fullName: \"John Doe\",\r\n          email: \"john.doe@example.com\",\r\n          phone: \"1234567890\",\r\n          address: \"123 Demo Street\",\r\n          city: \"Demo City\",\r\n          state: \"CA\",\r\n          zipCode: \"12345\",\r\n        },\r\n        productInfo: {\r\n          id: 1,\r\n          title: \"Premium Wireless Headphones\",\r\n          price: 199.99,\r\n          image:\r\n            \"https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=500\",\r\n          selectedVariants: [\"Black\", \"Regular\"],\r\n          quantity: 1,\r\n        },\r\n        paymentInfo: {\r\n          cardNumber: \"****1234\",\r\n          expiryDate: \"12/26\",\r\n        },\r\n        pricing: {\r\n          subtotal: 199.99,\r\n          tax: 16.0,\r\n          total: 215.99,\r\n        },\r\n        transaction: {\r\n          status: \"approved\",\r\n          message: \"Transaction approved successfully\",\r\n          transactionId: \"TXN-DEMO-001\",\r\n        },\r\n        status: \"approved\",\r\n        createdAt: \"2025-01-30T10:00:00.000Z\",\r\n        updatedAt: \"2025-01-30T10:00:00.000Z\",\r\n      },\r\n      {\r\n        orderNumber: \"ORD-20250530-DEMO2\",\r\n        customerInfo: {\r\n          fullName: \"Jane Smith\",\r\n          email: \"jane.smith@example.com\",\r\n          phone: \"0987654321\",\r\n          address: \"456 Sample Ave\",\r\n          city: \"Test City\",\r\n          state: \"NY\",\r\n          zipCode: \"54321\",\r\n        },\r\n        productInfo: {\r\n          id: 2,\r\n          title: \"Smart Fitness Watch\",\r\n          price: 299.99,\r\n          image:\r\n            \"https://images.unsplash.com/photo-1523275335684-37898b6baf30?w=500\",\r\n          selectedVariants: [\"Silver\", \"Sport\"],\r\n          quantity: 1,\r\n        },\r\n        paymentInfo: {\r\n          cardNumber: \"****5678\",\r\n          expiryDate: \"11/27\",\r\n        },\r\n        pricing: {\r\n          subtotal: 299.99,\r\n          tax: 24.0,\r\n          total: 323.99,\r\n        },\r\n        transaction: {\r\n          status: \"declined\",\r\n          message: \"Transaction declined\",\r\n          transactionId: null,\r\n        },\r\n        status: \"declined\",\r\n        createdAt: \"2025-01-30T09:30:00.000Z\",\r\n        updatedAt: \"2025-01-30T09:30:00.000Z\",\r\n      },\r\n    ];\r\n  }\r\n\r\n  async initializeFiles() {\r\n    try {\r\n      // Ensure data directory exists\r\n      const dataDir = path.join(__dirname, \"../data\");\r\n      await fs.mkdir(dataDir, { recursive: true });\r\n\r\n      // Check if orders.json exists, create if not\r\n      try {\r\n        await fs.access(this.ordersPath);\r\n      } catch (error) {\r\n        console.log(\"📁 Creating orders.json file...\");\r\n        await fs.writeFile(this.ordersPath, JSON.stringify([], null, 2));\r\n        console.log(\"✅ orders.json created successfully\");\r\n      }\r\n\r\n      console.log(\"✅ File service initialized\");\r\n    } catch (error) {\r\n      console.error(\"❌ Error initializing files:\", error);\r\n    }\r\n  }\r\n\r\n  async readProducts() {\r\n    try {\r\n      const data = await fs.readFile(this.productsPath, \"utf8\");\r\n      return JSON.parse(data);\r\n    } catch (error) {\r\n      console.error(\"❌ Error reading products:\", error);\r\n\r\n      // Return fallback products if file doesn't exist\r\n      return [\r\n        {\r\n          id: 1,\r\n          title: \"Premium Wireless Headphones\",\r\n          description:\r\n            \"Experience crystal-clear audio with our premium wireless headphones featuring active noise cancellation, 30-hour battery life, and premium comfort padding.\",\r\n          price: 199.99,\r\n          image:\r\n            \"https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=500\",\r\n          variants: [\r\n            {\r\n              type: \"color\",\r\n              label: \"Color\",\r\n              options: [\"Black\", \"White\", \"Blue\"],\r\n            },\r\n            { type: \"size\", label: \"Size\", options: [\"Regular\", \"Large\"] },\r\n          ],\r\n          inventory: {\r\n            \"Black-Regular\": 15,\r\n            \"Black-Large\": 8,\r\n            \"White-Regular\": 12,\r\n            \"White-Large\": 5,\r\n            \"Blue-Regular\": 10,\r\n            \"Blue-Large\": 3,\r\n          },\r\n        },\r\n        {\r\n          id: 2,\r\n          title: \"Smart Fitness Watch\",\r\n          description:\r\n            \"Track your fitness journey with our advanced smartwatch. Features heart rate monitoring, GPS tracking, sleep analysis, and 7-day battery life.\",\r\n          price: 299.99,\r\n          image:\r\n            \"https://images.unsplash.com/photo-1523275335684-37898b6baf30?w=500\",\r\n          variants: [\r\n            {\r\n              type: \"color\",\r\n              label: \"Color\",\r\n              options: [\"Black\", \"Silver\", \"Rose Gold\"],\r\n            },\r\n            {\r\n              type: \"band\",\r\n              label: \"Band Type\",\r\n              options: [\"Sport\", \"Leather\", \"Metal\"],\r\n            },\r\n          ],\r\n          inventory: {\r\n            \"Black-Sport\": 20,\r\n            \"Black-Leather\": 10,\r\n            \"Black-Metal\": 8,\r\n            \"Silver-Sport\": 15,\r\n            \"Silver-Leather\": 7,\r\n            \"Silver-Metal\": 12,\r\n            \"Rose Gold-Sport\": 18,\r\n            \"Rose Gold-Leather\": 6,\r\n            \"Rose Gold-Metal\": 4,\r\n          },\r\n        },\r\n      ];\r\n    }\r\n  }\r\n\r\n  async readOrders() {\r\n    try {\r\n      // For Vercel deployment, use in-memory storage + any file-based orders\r\n      const fileOrders = [];\r\n\r\n      try {\r\n        const data = await fs.readFile(this.ordersPath, \"utf8\");\r\n        fileOrders.push(...JSON.parse(data));\r\n      } catch (error) {\r\n        // File doesn't exist or can't be read, that's okay\r\n      }\r\n\r\n      // Combine demo orders with any new orders\r\n      const allOrders = [...this.memoryOrders, ...fileOrders];\r\n      console.log(\r\n        `📋 Read ${allOrders.length} orders (${this.memoryOrders.length} demo + ${fileOrders.length} new)`\r\n      );\r\n\r\n      return allOrders;\r\n    } catch (error) {\r\n      console.error(\"❌ Error reading orders:\", error);\r\n      console.log(\"🔄 Returning demo orders only\");\r\n      return this.memoryOrders;\r\n    }\r\n  }\r\n\r\n  async writeOrders(orders) {\r\n    try {\r\n      // Update memory storage\r\n      const newOrders = orders.filter(\r\n        (order) =>\r\n          !this.memoryOrders.find(\r\n            (demo) => demo.orderNumber === order.orderNumber\r\n          )\r\n      );\r\n\r\n      // Try to write to file (may not persist on Vercel)\r\n      await fs.writeFile(this.ordersPath, JSON.stringify(newOrders, null, 2));\r\n      console.log(\r\n        `💾 Saved ${orders.length} orders (${newOrders.length} new orders)`\r\n      );\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"❌ Error writing orders:\", error);\r\n      console.log(\r\n        \"💡 Note: Orders may not persist between deployments on Vercel\"\r\n      );\r\n      return true; // Don't fail the operation\r\n    }\r\n  }\r\n\r\n  async addOrder(order) {\r\n    try {\r\n      console.log(`📝 Adding order ${order.orderNumber} to storage...`);\r\n\r\n      // Add to memory immediately\r\n      this.memoryOrders.push(order);\r\n\r\n      // Try to save to file as well\r\n      const currentOrders = await this.readOrders();\r\n      const updatedOrders = [...currentOrders];\r\n\r\n      // Don't duplicate if already exists\r\n      if (!updatedOrders.find((o) => o.orderNumber === order.orderNumber)) {\r\n        updatedOrders.push(order);\r\n      }\r\n\r\n      await this.writeOrders(updatedOrders);\r\n      console.log(`✅ Order ${order.orderNumber} saved successfully`);\r\n      return order;\r\n    } catch (error) {\r\n      console.error(`❌ Error adding order ${order.orderNumber}:`, error);\r\n      throw new Error(\"Failed to save order\");\r\n    }\r\n  }\r\n\r\n  async findOrderByNumber(orderNumber) {\r\n    try {\r\n      console.log(`🔍 Searching for order: ${orderNumber}`);\r\n      const orders = await this.readOrders();\r\n      const order = orders.find((order) => order.orderNumber === orderNumber);\r\n\r\n      if (order) {\r\n        console.log(`✅ Found order: ${orderNumber}`);\r\n      } else {\r\n        console.log(`❌ Order not found: ${orderNumber}`);\r\n      }\r\n\r\n      return order;\r\n    } catch (error) {\r\n      console.error(`❌ Error finding order ${orderNumber}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = new FileService();\r\n"
        }
    ]
}